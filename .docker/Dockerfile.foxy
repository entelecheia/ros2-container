# Sets the base image for subsequent instructions
FROM ghcr.io/entelecheia/devcon:latest-ubuntu-20.04 AS builder

# Sets labels for the image
LABEL org.opencontainers.image.source="https://github.com/entelecheia/ros2-container"
LABEL org.opencontainers.image.description="ROS2 Container for development and deployment"
LABEL org.opencontainers.image.licenses="MIT"

USER root
# Setting this argument prevents interactive prompts during the build process
ARG DEBIAN_FRONTEND=noninteractive
# Updates the image and installs necessary packages
RUN add-apt-repository universe
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update --fix-missing \
    && apt-get install -y \
        python3-argcomplete \
        libpoco-dev \
        ros-foxy-desktop \
        ros-dev-tools \
        # Cleans up unnecessary packages to reduce image size
    && apt-get autoremove -y \
    && apt-get clean -y

# Sets Python environment variables
ENV PIP_DEFAULT_TIMEOUT 100
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Setting ARGs and ENVs for the app
ARG ARG_APP_INSTALL_ROOT="/opt"
ARG ARG_APP_DIRNAME="ros"
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_DIRNAME $ARG_APP_DIRNAME
ENV APP_SRC_DIR=${APP_INSTALL_ROOT}/${APP_DIRNAME}
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/.venvs/${APP_DIRNAME}
ENV PATH="${APP_VIRTUAL_ENV}/bin:${PATH}"
ENV AARG ARG_WORKSPACE_ROOT="/workspace"
ENV WORKSPACE_ROOT $ARG_WORKSPACE_ROOT
ENV SCRIPTS_DIR="${APP_INSTALL_ROOT}/scripts"

# Install the latest version of CMake
RUN mkdir -p "${SCRIPTS_DIR}"
ARG SHELL_SCRIPT="install-cmake.sh"
COPY "./.docker/scripts/${SHELL_SCRIPT}" "${SCRIPTS_DIR}/${SHELL_SCRIPT}"
ARG ARG_CMAKE_VERSION="3.23.2"
ENV CMAKE_VERSION=$ARG_CMAKE_VERSION
RUN bash "${SCRIPTS_DIR}/${SHELL_SCRIPT}"
ENV PATH="${APP_INSTALL_ROOT}/cmake-${CMAKE_VERSION}/bin:${PATH}"

ARG SHELL_SCRIPT="install-fcl.sh"
COPY "./.docker/scripts/${SHELL_SCRIPT}" "${SCRIPTS_DIR}/${SHELL_SCRIPT}"
RUN bash "${SCRIPTS_DIR}/${SHELL_SCRIPT}"

# Setting ARGs and ENVs for user creation and workspace setup
ARG ARG_USERNAME="dev"
ARG ARG_USER_UID=8001
ARG ARG_USER_GID=$ARG_USER_UID
ENV USERNAME $ARG_USERNAME
ENV USER_UID $ARG_USER_UID
ENV USER_GID $ARG_USER_GID

# Creates a non-root user with sudo privileges
# Check if user exists and if not, create user
RUN set -eux; \
    if id -u $USERNAME >/dev/null 2>&1; then \
        # If the current user's user ID is different from the specified user ID, change the user ID of the current user to the specified user ID
        if [ "$USER_UID" -ne "$(id -u $USERNAME)" ]; then \
            usermod --uid $USER_UID $USERNAME; \
        fi; \
    else \
        useradd --uid $USER_UID --create-home --shell /bin/bash --groups sudo $USERNAME; \
        echo "$USERNAME:$USERNAME" | chpasswd; \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME; \
        chmod 0440 /etc/sudoers.d/$USERNAME; \
    fi

# Switches to the newly created user
USER $USERNAME

# Symbolic link to the app source directory
RUN ln -s "$APP_SRC_DIR" "/home/$USERNAME/$APP_DIRNAME" 
# Add the ROS2 setup.bash to the bashrc
RUN echo "source /opt/ros/foxy/setup.bash" >> ~/.bashrc

# Switches to the root user
USER root

# Specifies the command that will be executed when the container is run
CMD ["bash"]
